{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Alexandria! To check out Alexandria visit here . To check out the code visit GitHub Project Alexandria is my attempt at cloning the Microsoft Teams App as part of the Engage Mentorship Programme'21 . The Great Library of Alexandria was one of the most significant libraries of the ancient world. It came to be regarded as the capital of learning and knowledge. Drawing inspiration from this, I visualised a collaborative virtual infrastructure where new spaces can be created for teams to meet and work. Just as the Library of Alexandria was the hub for sharing of knowledge in the ancient times, I see platforms like Teams being the hub for collective working, growing and learning in these new times brought about by the Pandemic. Tech Stack Although familiar with NodeJs projects, this was my first time coding in JS- especially working with React \ud83d\ude25. I learnt on the get-go, and spent- sometimes hours on end debugging! It was challenging but in a good way. Here's the tech stack involved for each of the functionalities: App Authentication : Firebase Authentication using Google Auth-Provider. Video-Call Functionality's Back-End : Used Express framework to code the server-side where my Client pings during a video-call. Code can be found at server\\index.js from repository. Video-Call Functionality : Using PeerJS (wraps WebRTC ), socket.io \\ socket.io client . Also using STUN servers to allow remote participation! Client-side : React JS for Alexandria's front-end. Redux for users' state management. Code can be found under client\\ from repository. I have made good use of @material-ui and mui-treasury packages for building aesthetic UI components. Database : Firestore database for storing data on the cloud- for eg. the rooms a user has joined, the chat messages, and user information. Functionalities offered To know more about the functionalities themselves, navigate to their section: Login : In order to enter Alexandria, you need to sign-in with a Google account. Home : You can see the list of users on your left and the list of joined Rooms in the center. To add more rooms, click on Join Rooms Call : To instantly connect with a friend, click on connect besides their name from the user list. This shall redirect you to a meeting, and send your friend a notification pop-up asking them to join you. Please note that your friend will have to be signed-in and on the app interface in order to recieve the pop-up! Chat : Chat feature is available throughout Alexandria. You can send a direct message to a friend from the Home, or chat with room-members from a particular Room. Rooms : Each Room is modelled after a Team from the Microsoft Teams App. A Room is a virtual workspace made for team collaboration over a particular activity- be it a project, or a university course or even event management. Conversation can be maintained by creating Channels in a room, to keep discussions organised. Meetings : Group Video Calls; this is also the minimum functionality to be coded in for the Engage Mentorship Programme. Asides from directly calling an online user and have a one-on-one video call; Meetings can also be started from a Room itself, after which the meeting link can be copied and shared to invite others. Code Quality: Prettier and Eslint has been used to maintain code quality as well as linting checks. CI/CD and Hosting: Deployment The Client is deployed on the Cloud using Firebase Hosting services- and my Server is deployed on Azure using Web App Services . The server_url (the URL where Server is deployed on Azure) is used in the client-side of Video-Call functionality for socket.io to make and get requests. CI/CD Project Alexandria is on GitHub . I use GitHub Actions for Firebase to run jobs for build deployments as well as linting checks. Testing: React-testing libraries: @testing-library/jest-dom , @testing-library/react , @testing-library/user-event , react-test-renderer , along with redux-mock-store , Jest``Enzyme has been used to write component tests. Documentation: Use mkdocs to build this documentation and serve it onto GitHub Project Pages.","title":"Home"},{"location":"#_1","text":"","title":""},{"location":"#_2","text":"","title":""},{"location":"#welcome-to-alexandria","text":"To check out Alexandria visit here . To check out the code visit GitHub Project Alexandria is my attempt at cloning the Microsoft Teams App as part of the Engage Mentorship Programme'21 . The Great Library of Alexandria was one of the most significant libraries of the ancient world. It came to be regarded as the capital of learning and knowledge. Drawing inspiration from this, I visualised a collaborative virtual infrastructure where new spaces can be created for teams to meet and work. Just as the Library of Alexandria was the hub for sharing of knowledge in the ancient times, I see platforms like Teams being the hub for collective working, growing and learning in these new times brought about by the Pandemic.","title":"Welcome to Alexandria!"},{"location":"#tech-stack","text":"Although familiar with NodeJs projects, this was my first time coding in JS- especially working with React \ud83d\ude25. I learnt on the get-go, and spent- sometimes hours on end debugging! It was challenging but in a good way. Here's the tech stack involved for each of the functionalities: App Authentication : Firebase Authentication using Google Auth-Provider. Video-Call Functionality's Back-End : Used Express framework to code the server-side where my Client pings during a video-call. Code can be found at server\\index.js from repository. Video-Call Functionality : Using PeerJS (wraps WebRTC ), socket.io \\ socket.io client . Also using STUN servers to allow remote participation! Client-side : React JS for Alexandria's front-end. Redux for users' state management. Code can be found under client\\ from repository. I have made good use of @material-ui and mui-treasury packages for building aesthetic UI components. Database : Firestore database for storing data on the cloud- for eg. the rooms a user has joined, the chat messages, and user information.","title":"Tech Stack"},{"location":"#functionalities-offered","text":"To know more about the functionalities themselves, navigate to their section: Login : In order to enter Alexandria, you need to sign-in with a Google account. Home : You can see the list of users on your left and the list of joined Rooms in the center. To add more rooms, click on Join Rooms Call : To instantly connect with a friend, click on connect besides their name from the user list. This shall redirect you to a meeting, and send your friend a notification pop-up asking them to join you. Please note that your friend will have to be signed-in and on the app interface in order to recieve the pop-up! Chat : Chat feature is available throughout Alexandria. You can send a direct message to a friend from the Home, or chat with room-members from a particular Room. Rooms : Each Room is modelled after a Team from the Microsoft Teams App. A Room is a virtual workspace made for team collaboration over a particular activity- be it a project, or a university course or even event management. Conversation can be maintained by creating Channels in a room, to keep discussions organised. Meetings : Group Video Calls; this is also the minimum functionality to be coded in for the Engage Mentorship Programme. Asides from directly calling an online user and have a one-on-one video call; Meetings can also be started from a Room itself, after which the meeting link can be copied and shared to invite others.","title":"Functionalities offered"},{"location":"#code-quality","text":"Prettier and Eslint has been used to maintain code quality as well as linting checks.","title":"Code Quality:"},{"location":"#cicd-and-hosting","text":"Deployment The Client is deployed on the Cloud using Firebase Hosting services- and my Server is deployed on Azure using Web App Services . The server_url (the URL where Server is deployed on Azure) is used in the client-side of Video-Call functionality for socket.io to make and get requests. CI/CD Project Alexandria is on GitHub . I use GitHub Actions for Firebase to run jobs for build deployments as well as linting checks.","title":"CI/CD and Hosting:"},{"location":"#testing","text":"React-testing libraries: @testing-library/jest-dom , @testing-library/react , @testing-library/user-event , react-test-renderer , along with redux-mock-store , Jest``Enzyme has been used to write component tests.","title":"Testing:"},{"location":"#documentation","text":"Use mkdocs to build this documentation and serve it onto GitHub Project Pages.","title":"Documentation:"},{"location":"call/","text":"Call a Friend and Start a Meeting Immediately You can directly call another online user into a conference meeting. To instantly connect with a friend, click on connect besides their name from the user list. To test this out alone, simply click on connect beside your own name. This shall redirect you to a meeting, and send your friend (or you, if you called yourself) a notification pop-up asking them to join you. Please note that your friend will have to be signed-in and on the app interface in order to recieve the pop-up! Explore Calling somebody instantly starts a mutual meeting between the two of you. Note the URL, the pairID in the string. You'll see the same pairID in the mutual Chat URL. As a sender you'll be instantly redirected to the Meeting UI, As the reciever, (if you're online and on the app interface) you shall get a pop-up notification. If you click on join you shall be redirected to the same meeting as the sender. For solo testing, open an instance in Chrome and sign-in with an account and open another instance in Incognito Mode (Chrome) and sign-in with a second account. Click on connect on either instances, get a pop-up on the other!\u200b The Meeting UI is discussed more thoroughly in its section here Working Socket.io is used to emit and receive requests between Server and Clients, thereby allowing clients to communicate with the Express server when a user wants to notify their friend about the meeting. Say User A wants to meet User B. On clicking connect , User A emits a request body containing both their own auth.currentUser object and user object of User B along with the meeting URL (note the creation of pairID here) to server. // on clicking connect onClick={() => { socket.emit( \"want-to-meet\", { sender: auth.currentUser, receiver: user, meet: `/meeting/chat/${ ascii_to_hexa(auth.currentUser.uid.slice(0, 6)) + ascii_to_hexa(user.userID.slice(0, 6)) }`, }, (response) => { console.log(response); console.log(\"ack\"); } ); The ExpressJS Server (deployed on Azure Web App services ) on receiving this packet, broadcasts it to all listening clients(i.e, users online and on the app interface) io.on(\"connection\", (socket) => { console.log(\"new client connected\"); socket.on(\"want-to-meet\", (data, ack) => { console.log(\"want-to-meet\", data); ack(\"woot\"); io.emit(\"want-to-meet\", data); console.log(\"emitted\"); }); All clients on receiving this packet, check if the reciever.uid matches their own. User B, in this narrative matches, and successfully gets a pop-up. // client listening for call information. If successful match, react state updates and they get a notif. const socket = socketIOClient(ENDPOINT, { secure: true }); socket.on(\"want-to-meet\", (data) => { console.log(\"want-to-meet says server\", data.receiver.userID); if (data.receiver.userID === auth.currentUser.uid) { console.log(data); setResponse(data); setShowModal(true); } }); Troubleshooting For testing purposes, you may try calling yourself first. If, while testing with your friend you don't receive notif on their connecting with you, try sending your friend a notif instead (and vice-versa)","title":"Call a Friend"},{"location":"call/#call-a-friend-and-start-a-meeting-immediately","text":"You can directly call another online user into a conference meeting. To instantly connect with a friend, click on connect besides their name from the user list. To test this out alone, simply click on connect beside your own name. This shall redirect you to a meeting, and send your friend (or you, if you called yourself) a notification pop-up asking them to join you. Please note that your friend will have to be signed-in and on the app interface in order to recieve the pop-up!","title":"Call a Friend and Start a Meeting Immediately"},{"location":"call/#explore","text":"Calling somebody instantly starts a mutual meeting between the two of you. Note the URL, the pairID in the string. You'll see the same pairID in the mutual Chat URL. As a sender you'll be instantly redirected to the Meeting UI, As the reciever, (if you're online and on the app interface) you shall get a pop-up notification. If you click on join you shall be redirected to the same meeting as the sender. For solo testing, open an instance in Chrome and sign-in with an account and open another instance in Incognito Mode (Chrome) and sign-in with a second account. Click on connect on either instances, get a pop-up on the other!\u200b The Meeting UI is discussed more thoroughly in its section here","title":"Explore"},{"location":"call/#working","text":"Socket.io is used to emit and receive requests between Server and Clients, thereby allowing clients to communicate with the Express server when a user wants to notify their friend about the meeting. Say User A wants to meet User B. On clicking connect , User A emits a request body containing both their own auth.currentUser object and user object of User B along with the meeting URL (note the creation of pairID here) to server. // on clicking connect onClick={() => { socket.emit( \"want-to-meet\", { sender: auth.currentUser, receiver: user, meet: `/meeting/chat/${ ascii_to_hexa(auth.currentUser.uid.slice(0, 6)) + ascii_to_hexa(user.userID.slice(0, 6)) }`, }, (response) => { console.log(response); console.log(\"ack\"); } ); The ExpressJS Server (deployed on Azure Web App services ) on receiving this packet, broadcasts it to all listening clients(i.e, users online and on the app interface) io.on(\"connection\", (socket) => { console.log(\"new client connected\"); socket.on(\"want-to-meet\", (data, ack) => { console.log(\"want-to-meet\", data); ack(\"woot\"); io.emit(\"want-to-meet\", data); console.log(\"emitted\"); }); All clients on receiving this packet, check if the reciever.uid matches their own. User B, in this narrative matches, and successfully gets a pop-up. // client listening for call information. If successful match, react state updates and they get a notif. const socket = socketIOClient(ENDPOINT, { secure: true }); socket.on(\"want-to-meet\", (data) => { console.log(\"want-to-meet says server\", data.receiver.userID); if (data.receiver.userID === auth.currentUser.uid) { console.log(data); setResponse(data); setShowModal(true); } });","title":"Working"},{"location":"call/#troubleshooting","text":"For testing purposes, you may try calling yourself first. If, while testing with your friend you don't receive notif on their connecting with you, try sending your friend a notif instead (and vice-versa)","title":"Troubleshooting"},{"location":"dm/","text":"Direct Message a fellow User Your direct messages with someone are private, and can not be accessed by anyone else. In order to test this, feel free to chat with bot from the user list. Explore Chat feature in Alexandria shows the timestamp of the message, along with the userName and avatar (profile picture) of the message sender (as obtained from their Google Account). You can also start a meeting from here, which will redirect you to the Meeting UI. Any messages exchanged in a meet call shall come up as Meeting Logs in the Chat UI itself after meeting conclusion. When on the DirectMessage UI, note the ID string in the URl. This ID is unique to just you and whoever you're chatting with (I call this a pairID ); I use this ID to store messages and handle events common to just the two of you (like starting a call) Working All messages are stored as documents under collection dms\\<pairID>\\messages\\ . The pairID for two users is obtained by taking a substring from each user's uid , converting both ascii strings to Hexa separately and then summing them. function ascii_to_hexa(str) { var arr1 = []; for (var n = 0, l = str.length; n < l; n++) { var hex = Number(str.charCodeAt(n)).toString(16); arr1.push(hex); } return parseInt(arr1.join(\"\"), 16); } Troubleshooting If Call Logs do not show up after a meeting conclusion, please try again.","title":"Direct Message"},{"location":"dm/#direct-message-a-fellow-user","text":"Your direct messages with someone are private, and can not be accessed by anyone else. In order to test this, feel free to chat with bot from the user list.","title":"Direct Message a fellow User"},{"location":"dm/#explore","text":"Chat feature in Alexandria shows the timestamp of the message, along with the userName and avatar (profile picture) of the message sender (as obtained from their Google Account). You can also start a meeting from here, which will redirect you to the Meeting UI. Any messages exchanged in a meet call shall come up as Meeting Logs in the Chat UI itself after meeting conclusion. When on the DirectMessage UI, note the ID string in the URl. This ID is unique to just you and whoever you're chatting with (I call this a pairID ); I use this ID to store messages and handle events common to just the two of you (like starting a call)","title":"Explore"},{"location":"dm/#working","text":"All messages are stored as documents under collection dms\\<pairID>\\messages\\ . The pairID for two users is obtained by taking a substring from each user's uid , converting both ascii strings to Hexa separately and then summing them. function ascii_to_hexa(str) { var arr1 = []; for (var n = 0, l = str.length; n < l; n++) { var hex = Number(str.charCodeAt(n)).toString(16); arr1.push(hex); } return parseInt(arr1.join(\"\"), 16); }","title":"Working"},{"location":"dm/#troubleshooting","text":"If Call Logs do not show up after a meeting conclusion, please try again.","title":"Troubleshooting"},{"location":"home/","text":"Home You can see the list of users on your left and your list of joined Rooms in the center. If this is your first time in Alexandria, there shall be only one room, i.e BookClub in your list. This means that you have been automatically added to Bookclub as a new user, and in order to add or join more rooms, click on Join Rooms . How the Home Page looks like to a new user adding their first room Explore Join Room : If you click on Join Rooms , you'll be prompted to enter a room name. The concept is similar to that of the Teams App, where you enter the Team Code and are subsequently added to the Team. If the Room does not already pre-exist, a new room shall be created. Direct Message (Chat) : From the list of users, click on the message icon to chat with a particular person. For testing purposes, you may chat with the bot . To know more, see here Call a friend/peer : Click on connect from beside a user from the user list. Please note that the user you're calling has to be online, signed in and on the app interface . On doing so, they will get a pop-up notification inviting them to join your call. To know more, see here Working The URL of Home has been set as / . (This is the Base URL) Rooms are stored as documents in the Firestore, under collection Rooms\\ . Each Room document has an array attribute of Users which keeps track of the users who've joined that particular room. The document also has string attribute roomName which is the name of the Room. // Add a Room to Firestore const handleAddRoom = () => { const roomName = prompt(\"Enter a new room name\"); if (roomName) { db.collection(\"rooms\").doc(roomName).set({ roomName: roomName }); db.collection(\"rooms\") .doc(roomName) .update({ roomName: roomName, users: firebase.firestore.FieldValue.arrayUnion( `${auth.currentUser.email}` ), }); To know more about Firestore, see here Using React Hooks useState , useEffect for effective state management. In Home, these are used to display Rooms and Users when the listener at Firestore detects a change. import React, { useState, useEffect } from \"react\"; const [users, setUsers] = useState([]); // React Hook for managing Users useEffect(() => { db.collection(\"users\") .orderBy(\"userName\", \"desc\") .get() .then((querySnapshot) => { setUsers( querySnapshot.docs.map((doc) => ({ userName: doc.data()[\"userName\"], userID: doc.id, })) ); }) .catch((error) => { console.log(\"Error getting users\", error); }); }, [setUsers]); Troubleshooting In case your added Room does not show up immediately, please reload the page. In case a peer signs into the app (thereby becoming a new user) yet does not show up in the user-list, please reload the page You need to be online with a good internet connection while using this app. Incase of poor network, you shall not be able to see the addition of new Rooms or Users (as Firebase won't fetch and update state)","title":"Home UI"},{"location":"home/#home","text":"You can see the list of users on your left and your list of joined Rooms in the center. If this is your first time in Alexandria, there shall be only one room, i.e BookClub in your list. This means that you have been automatically added to Bookclub as a new user, and in order to add or join more rooms, click on Join Rooms . How the Home Page looks like to a new user adding their first room","title":"Home"},{"location":"home/#explore","text":"Join Room : If you click on Join Rooms , you'll be prompted to enter a room name. The concept is similar to that of the Teams App, where you enter the Team Code and are subsequently added to the Team. If the Room does not already pre-exist, a new room shall be created. Direct Message (Chat) : From the list of users, click on the message icon to chat with a particular person. For testing purposes, you may chat with the bot . To know more, see here Call a friend/peer : Click on connect from beside a user from the user list. Please note that the user you're calling has to be online, signed in and on the app interface . On doing so, they will get a pop-up notification inviting them to join your call. To know more, see here","title":"Explore"},{"location":"home/#working","text":"The URL of Home has been set as / . (This is the Base URL) Rooms are stored as documents in the Firestore, under collection Rooms\\ . Each Room document has an array attribute of Users which keeps track of the users who've joined that particular room. The document also has string attribute roomName which is the name of the Room. // Add a Room to Firestore const handleAddRoom = () => { const roomName = prompt(\"Enter a new room name\"); if (roomName) { db.collection(\"rooms\").doc(roomName).set({ roomName: roomName }); db.collection(\"rooms\") .doc(roomName) .update({ roomName: roomName, users: firebase.firestore.FieldValue.arrayUnion( `${auth.currentUser.email}` ), }); To know more about Firestore, see here Using React Hooks useState , useEffect for effective state management. In Home, these are used to display Rooms and Users when the listener at Firestore detects a change. import React, { useState, useEffect } from \"react\"; const [users, setUsers] = useState([]); // React Hook for managing Users useEffect(() => { db.collection(\"users\") .orderBy(\"userName\", \"desc\") .get() .then((querySnapshot) => { setUsers( querySnapshot.docs.map((doc) => ({ userName: doc.data()[\"userName\"], userID: doc.id, })) ); }) .catch((error) => { console.log(\"Error getting users\", error); }); }, [setUsers]);","title":"Working"},{"location":"home/#troubleshooting","text":"In case your added Room does not show up immediately, please reload the page. In case a peer signs into the app (thereby becoming a new user) yet does not show up in the user-list, please reload the page You need to be online with a good internet connection while using this app. Incase of poor network, you shall not be able to see the addition of new Rooms or Users (as Firebase won't fetch and update state)","title":"Troubleshooting"},{"location":"login/","text":"Login In order to enter Alexandria and use any of it's functionalities, you need to sign-in with your Google account. Working User Authentication in Alexandria has been done with Firebase Authentication Services, using the user's Google Account. If you try to access any of Alexandria's routes without being signed-in, you shall be prompted to sign in. // generates pop-up window prompting user to sign in with Google account const signIn = () => { auth.signInWithPopup(provider).catch((error) => alert(error.message)); }; A User's state management has been done with the help of Redux slices. As soon as you signout, the state is updated, and you'll be redirected to Login UI. export const userSlice = createSlice({ name: 'user', initialState: { user: null, }, reducers: { login: (state, action) => { state.user = action.payload; }, logout: (state) => { state.user = false; }, }, }); export const { login, logout } = userSlice.actions; export const selectUser = (state) => state.user.user; export default userSlice.reducer; All users are stored as documents in the Firestore, under collection users\\ . Each User document's ID is the userID ( auth.currentUser.uid ) and has attribute userName ( auth.cuurentUser.displayName ). Troubleshooting You need to be online with a good internet connection while using this app. Incase you run into problems with Firebase connections, a message will pop up.","title":"Login"},{"location":"login/#login","text":"In order to enter Alexandria and use any of it's functionalities, you need to sign-in with your Google account.","title":"Login"},{"location":"login/#working","text":"User Authentication in Alexandria has been done with Firebase Authentication Services, using the user's Google Account. If you try to access any of Alexandria's routes without being signed-in, you shall be prompted to sign in. // generates pop-up window prompting user to sign in with Google account const signIn = () => { auth.signInWithPopup(provider).catch((error) => alert(error.message)); }; A User's state management has been done with the help of Redux slices. As soon as you signout, the state is updated, and you'll be redirected to Login UI. export const userSlice = createSlice({ name: 'user', initialState: { user: null, }, reducers: { login: (state, action) => { state.user = action.payload; }, logout: (state) => { state.user = false; }, }, }); export const { login, logout } = userSlice.actions; export const selectUser = (state) => state.user.user; export default userSlice.reducer; All users are stored as documents in the Firestore, under collection users\\ . Each User document's ID is the userID ( auth.currentUser.uid ) and has attribute userName ( auth.cuurentUser.displayName ).","title":"Working"},{"location":"login/#troubleshooting","text":"You need to be online with a good internet connection while using this app. Incase you run into problems with Firebase connections, a message will pop up.","title":"Troubleshooting"},{"location":"meetings/","text":"Start a Meeting One can start a meeting from any room, simply click on the hyperlink in the Header. You'll be redirected to the pre-meeting UI, prompting you to fill in your name afterwhich you're in! Remote participation is facilitated! (Ps: that's my friend holding up Oswald\ud83d\ude01 in the second video stream) Explore To have others join in, copy the invite link from the top and share (You can drop the link in the Room-Chat!) When a participant joins, it may take some seconds to see their video-stream. Just like any other Meeting functionality, features like mute/unmute , switch video on/off and share the screen are available. Share screen : There is an inbuilt chat functionality as well. The chats from a meeting are displayed as Meeting Logs in that particular Room's ChatBox after a meeting ends. Chat functionality : Working Using PeerJS and Socket.io to write server-side code in ExpressJS : const express = require(\"express\"); const app = express(); app.use(express.json()); var server = http.Server(app); var io = require(\"socket.io\")(server, { secure: true, allowEIO3: true }); const { ExpressPeerServer } = require(\"peer\"); const peerServer = ExpressPeerServer(server, { debug: true, }); app.use(\"/peerjs\", peerServer); socket.on(\"join-call\", (path) => { if (connections[path] === undefined) { connections[path] = []; } connections[path].push(socket.id); timeOnline[socket.id] = new Date(); for (let a = 0; a < connections[path].length; ++a) { io.to(connections[path][a]).emit( \"user-joined\", socket.id, connections[path] ); } if (messages[path] !== undefined) { for (let a = 0; a < messages[path].length; ++a) { io.to(socket.id).emit( \"chat-message\", messages[path][a][\"data\"], messages[path][a][\"sender\"], messages[path][a][\"socket-id-sender\"] ); } } In Client-side, socket.io-client handles requests. A snippet from /client/src/views/roomCall.js const io = require(\"socket.io-client\"); const server_url = \"https://alexandria-server.azurewebsites.net\"; // when a new user joins call: connectToSocketServer = () => { console.log(\"want to connect\"); socket = io.connect(server_url, { secure: true, }); socket.on(\"signal\", this.gotMessageFromServer); socket.on(\"connect\", () => { socket.emit(\"join-call\", window.location.href); socketId = socket.id; socket.on(\"chat-message\", this.addMessage); socket.on(\"user-left\", (id) => { let video = document.querySelector(`[data-socket=\"${id}\"]`); if (video !== null) { elms--; video.parentNode.removeChild(video); let main = document.getElementById(\"main\"); this.changeCssVideos(main); } }); Remote Participation is configured in PeerJS with the help of STUN servers like so: const peerConnectionConfig = { iceServers: [ { urls: [ \"stun:stun01.sipphone.com\", \"stun:stun.ekiga.net\", \"stun:stun.fwdnet.net\", ], }, ], }; Troubleshooting Please be patient\ud83d\ude04 while using the Meeting functionality, as I'm using a STUN server to facilitate remote user participation, and have written my own server-side code (rather than use a service like Jitsi , Vidyo , or Twilio )","title":"Meetings"},{"location":"meetings/#start-a-meeting","text":"One can start a meeting from any room, simply click on the hyperlink in the Header. You'll be redirected to the pre-meeting UI, prompting you to fill in your name afterwhich you're in! Remote participation is facilitated! (Ps: that's my friend holding up Oswald\ud83d\ude01 in the second video stream)","title":"Start a Meeting"},{"location":"meetings/#explore","text":"To have others join in, copy the invite link from the top and share (You can drop the link in the Room-Chat!) When a participant joins, it may take some seconds to see their video-stream. Just like any other Meeting functionality, features like mute/unmute , switch video on/off and share the screen are available. Share screen : There is an inbuilt chat functionality as well. The chats from a meeting are displayed as Meeting Logs in that particular Room's ChatBox after a meeting ends. Chat functionality :","title":"Explore"},{"location":"meetings/#working","text":"Using PeerJS and Socket.io to write server-side code in ExpressJS : const express = require(\"express\"); const app = express(); app.use(express.json()); var server = http.Server(app); var io = require(\"socket.io\")(server, { secure: true, allowEIO3: true }); const { ExpressPeerServer } = require(\"peer\"); const peerServer = ExpressPeerServer(server, { debug: true, }); app.use(\"/peerjs\", peerServer); socket.on(\"join-call\", (path) => { if (connections[path] === undefined) { connections[path] = []; } connections[path].push(socket.id); timeOnline[socket.id] = new Date(); for (let a = 0; a < connections[path].length; ++a) { io.to(connections[path][a]).emit( \"user-joined\", socket.id, connections[path] ); } if (messages[path] !== undefined) { for (let a = 0; a < messages[path].length; ++a) { io.to(socket.id).emit( \"chat-message\", messages[path][a][\"data\"], messages[path][a][\"sender\"], messages[path][a][\"socket-id-sender\"] ); } } In Client-side, socket.io-client handles requests. A snippet from /client/src/views/roomCall.js const io = require(\"socket.io-client\"); const server_url = \"https://alexandria-server.azurewebsites.net\"; // when a new user joins call: connectToSocketServer = () => { console.log(\"want to connect\"); socket = io.connect(server_url, { secure: true, }); socket.on(\"signal\", this.gotMessageFromServer); socket.on(\"connect\", () => { socket.emit(\"join-call\", window.location.href); socketId = socket.id; socket.on(\"chat-message\", this.addMessage); socket.on(\"user-left\", (id) => { let video = document.querySelector(`[data-socket=\"${id}\"]`); if (video !== null) { elms--; video.parentNode.removeChild(video); let main = document.getElementById(\"main\"); this.changeCssVideos(main); } }); Remote Participation is configured in PeerJS with the help of STUN servers like so: const peerConnectionConfig = { iceServers: [ { urls: [ \"stun:stun01.sipphone.com\", \"stun:stun.ekiga.net\", \"stun:stun.fwdnet.net\", ], }, ], };","title":"Working"},{"location":"meetings/#troubleshooting","text":"Please be patient\ud83d\ude04 while using the Meeting functionality, as I'm using a STUN server to facilitate remote user participation, and have written my own server-side code (rather than use a service like Jitsi , Vidyo , or Twilio )","title":"Troubleshooting"},{"location":"rooms/","text":"Rooms As a new user, you're automatically added to BookClub . Let's say you enter Bookclub while testing Alexandria. Explore You'll see a list of Channels on the Sidebar navigation, a Header , and the Chatbox . The ChatBox contains the messages from Room Members, as well as Meeting Logs (messages exchanged during a meeting) Channels are a way of modularising conversation, keeping separate topics of collaboration in a room workspace. This concept is similar to that of the Teams App, wherein each Team maintained conversation and workspace associated to it's designated purpose. For eg: A college maintains a Room for each of their courses. Now each Room will have different Channels for different purposes. Say there is a channel \"Exams\" for exam-related conversation, another channel \"Class\" where students exchange classwork-associated doubts. As BookClub is a pre-existing room, some users are already here, and you can see their messages and channels created. (I have been testing Alexandria out with my friends and assigned Engage Mentor as well \ud83d\ude04) You can see each message sender's profile picture , name , and also timestamp of each message. Feel free to check the other channels out, create a new channel, and send some messages to test functionalities. You can also start a meeting from a room. The Meeting Logs will come up here after the conclusion of a meeting. You can sign-out from here too, and be redirected to Login UI. Working Made Custom React Components for aesthetic UI, for eg: the Chat Message UI. I have made good use of @material-ui and mui-treasury packages for building these. Flex has been applied on these React components to render SideBar , ChatBox , Header and ChatInput - and facilitate scrolling in both Meeting Logs box as well as the ChatBox Redux slice has been used to maintain state between Channels, and to enforce DRY principle of Agile Development. //appSlice.js import { createSlice } from '@reduxjs/toolkit'; export const appSlice = createSlice({ name: 'app', initialState: { channelId: \"general\", channelName: \"general\", }, reducers: { setChannelInfo: (state, action) => { state.channelId = action.payload.channelId; state.channelName = action.payload.channelName; }, }, }); export const { setChannelInfo } = appSlice.actions; export const selectChannelId = (state) => state.app.channelId; export const selectChannelName = (state) => state.app.channelName; export default appSlice.reducer; All messages of a particular Channel are stored as documents under collection rooms\\<roomID>\\channels\\<channelID>\\messages\\ . Troubleshooting If Call Logs do not show up after a meeting conclusion, please try again.","title":"Rooms"},{"location":"rooms/#rooms","text":"As a new user, you're automatically added to BookClub . Let's say you enter Bookclub while testing Alexandria.","title":"Rooms"},{"location":"rooms/#explore","text":"You'll see a list of Channels on the Sidebar navigation, a Header , and the Chatbox . The ChatBox contains the messages from Room Members, as well as Meeting Logs (messages exchanged during a meeting) Channels are a way of modularising conversation, keeping separate topics of collaboration in a room workspace. This concept is similar to that of the Teams App, wherein each Team maintained conversation and workspace associated to it's designated purpose. For eg: A college maintains a Room for each of their courses. Now each Room will have different Channels for different purposes. Say there is a channel \"Exams\" for exam-related conversation, another channel \"Class\" where students exchange classwork-associated doubts. As BookClub is a pre-existing room, some users are already here, and you can see their messages and channels created. (I have been testing Alexandria out with my friends and assigned Engage Mentor as well \ud83d\ude04) You can see each message sender's profile picture , name , and also timestamp of each message. Feel free to check the other channels out, create a new channel, and send some messages to test functionalities. You can also start a meeting from a room. The Meeting Logs will come up here after the conclusion of a meeting. You can sign-out from here too, and be redirected to Login UI.","title":"Explore"},{"location":"rooms/#working","text":"Made Custom React Components for aesthetic UI, for eg: the Chat Message UI. I have made good use of @material-ui and mui-treasury packages for building these. Flex has been applied on these React components to render SideBar , ChatBox , Header and ChatInput - and facilitate scrolling in both Meeting Logs box as well as the ChatBox Redux slice has been used to maintain state between Channels, and to enforce DRY principle of Agile Development. //appSlice.js import { createSlice } from '@reduxjs/toolkit'; export const appSlice = createSlice({ name: 'app', initialState: { channelId: \"general\", channelName: \"general\", }, reducers: { setChannelInfo: (state, action) => { state.channelId = action.payload.channelId; state.channelName = action.payload.channelName; }, }, }); export const { setChannelInfo } = appSlice.actions; export const selectChannelId = (state) => state.app.channelId; export const selectChannelName = (state) => state.app.channelName; export default appSlice.reducer; All messages of a particular Channel are stored as documents under collection rooms\\<roomID>\\channels\\<channelID>\\messages\\ .","title":"Working"},{"location":"rooms/#troubleshooting","text":"If Call Logs do not show up after a meeting conclusion, please try again.","title":"Troubleshooting"},{"location":"test/","text":"Testing Minimum Functionality Here's what you can do to just test the Minimum Functionality and Adapt Phase Challenge tasks: Steps Sign in using your Google account. Enter BookClub . See the Meeting Logs from previous test runs as you scroll down General Start a Meeting from the Header You'll be redirected to the pre-meeting UI and fill in your name (a random name is already there in the input) On entering the Meeting, copy the invite link from the top and either share it with a friend, or paste it in another tab and join as the second user. As I am using STUN servers to accomodate remote users (and not pre-built Services), the time it takes for another user to join in can take anything between 30s to 2 minutes . Please be patient \ud83d\ude05 This has been built using ReactJS for the Client-Side, ExpressJS for the Server-Side and socket.io and PeerJS library for facilitating the Video Call. You can mute/unmute , switch camera on/off and share screen as well. There's inbuilt Chat Functionality, and messages exchanged here shall be displayed as Meeting Logs in the ChatBox when you end the meeting. Troubleshooting I have tested Alexandria's functionalities out with my friends, seniors- even with my Mentor at the Engage Programme, multiple times; and know that everything is good. But then- `Murphy's Law: \"Anything that can go wrong, will go wrong\"` Thus, the significance of this section. If you encounter a blank page with just the app's background colour, reload the page. Please be patient with the Meeting Functionality- it may take a few attempts for a second user to join the call, in case the STUN server urls aren't connecting (or your region is experiencing network issues). I have done my best to avoid this, by testing the urls on ICETrickle to see their status. You need to be online with a good internet connection while using this app. Incase you run into problems with Firebase connections, a message will pop up.","title":"Test Minimum Functionality"},{"location":"test/#testing-minimum-functionality","text":"Here's what you can do to just test the Minimum Functionality and Adapt Phase Challenge tasks:","title":"Testing Minimum Functionality"},{"location":"test/#steps","text":"Sign in using your Google account. Enter BookClub . See the Meeting Logs from previous test runs as you scroll down General Start a Meeting from the Header You'll be redirected to the pre-meeting UI and fill in your name (a random name is already there in the input) On entering the Meeting, copy the invite link from the top and either share it with a friend, or paste it in another tab and join as the second user. As I am using STUN servers to accomodate remote users (and not pre-built Services), the time it takes for another user to join in can take anything between 30s to 2 minutes . Please be patient \ud83d\ude05 This has been built using ReactJS for the Client-Side, ExpressJS for the Server-Side and socket.io and PeerJS library for facilitating the Video Call. You can mute/unmute , switch camera on/off and share screen as well. There's inbuilt Chat Functionality, and messages exchanged here shall be displayed as Meeting Logs in the ChatBox when you end the meeting.","title":"Steps"},{"location":"test/#troubleshooting","text":"I have tested Alexandria's functionalities out with my friends, seniors- even with my Mentor at the Engage Programme, multiple times; and know that everything is good. But then- `Murphy's Law: \"Anything that can go wrong, will go wrong\"` Thus, the significance of this section. If you encounter a blank page with just the app's background colour, reload the page. Please be patient with the Meeting Functionality- it may take a few attempts for a second user to join the call, in case the STUN server urls aren't connecting (or your region is experiencing network issues). I have done my best to avoid this, by testing the urls on ICETrickle to see their status. You need to be online with a good internet connection while using this app. Incase you run into problems with Firebase connections, a message will pop up.","title":"Troubleshooting"}]}